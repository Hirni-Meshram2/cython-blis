trigger:
  batch: true
  branches:
    include:
    - '*'

variables:
  # Change this to generate JSONL / headers instead of running a normal build
  generate_jsonl: false

jobs:
- job: 'JSONL'
  condition: eq(variables['generate_jsonl'], 'true')
  pool:
    vmImage: 'windows-2019'
  variables:
    MSYSTEM: MINGW$(arch)
    MSYS2_PATH_TYPE: inherit
    CHERE_INVOKING: '1'
    PREFIX: '/output'
    BUILD_PREFIX: '/output'
    CC: clang
    RANLIB: echo
    LIBPTHREAD: ''
    # AS: llvm-as.exe
    AR: llvm-ar
  steps:
    - bash: |
        choco install llvm
        git submodule update --init --recursive
      displayName: 'Install'

    # Script based on:
    # https://github.com/conda-forge/blis-feedstock/blob/master/recipe/build.sh
    # export CFLAGS="-MD -I$PREFIX/Library/include"
    # export LDFLAGS="$LDFLAGS -L$PREFIX/Library/lib"
    # mv $PREFIX/Library/lib/libblis.lib $PREFIX/Library/lib/blis.lib
    # mv $PREFIX/Library/lib/libblis.a $PREFIX/Library/lib/libblis.lib
    # mv $PREFIX/Library/lib/libblis.*.dll $PREFIX/Library/bin/
    - bash: |
        set -e
        cd flame-blis
        export PATH="/c/Program Files/LLVM/bin:$PATH"
        export CFLAGS="-MD -I'/c/Program Files/LLVM/include'"
        export LDFLAGS="$LDFLAGS -L'/c/Program Files/LLVM/lib'"
        clang --version
        llvm-ar --version
        ./configure --enable-shared --enable-static --enable-cblas --enable-threading=pthreads --enable-arg-max-hack x86_64
        make V=1
      displayName: 'Build'

    # - task: CopyFiles@2
    #   inputs:
    #     contents: $(Build.SourcesDirectory)/blis/_src/make/windows-x86_64.jsonl
    #     targetFolder: $(Build.ArtifactStagingDirectory)
    #     flattenFolders: true
    #   displayName: 'Copy JSONL'

    # - task: CopyFiles@2
    #   inputs:
    #     contents: $(Build.SourcesDirectory)/flame-blis/make.log
    #     targetFolder: $(Build.ArtifactStagingDirectory)
    #     flattenFolders: true
    #   displayName: 'Copy make.log'

    # - task: CopyFiles@2
    #   inputs:
    #     contents: $(Build.SourcesDirectory)/flame-blis/include/x86_64/blis.h
    #     targetFolder: $(Build.ArtifactStagingDirectory)
    #     flattenFolders: true
    #   displayName: 'Copy header'

    # - task: PublishBuildArtifacts@1
    #   inputs:
    #     pathtoPublish: $(Build.ArtifactStagingDirectory)
    #     artifactName: data
    #   displayName: 'Publish files'

- job: 'Test'
  condition: eq(variables['generate_jsonl'], 'false')
  strategy:
    matrix:
      # Python27Linux:
      #   imageName: 'ubuntu-16.04'
      #   python.version: '2.7'
      # Python27Mac:
      #   imageName: 'macos-10.13'
      #   python.version: '2.7'
      # Python35Linux:
      #   imageName: 'ubuntu-16.04'
      #   python.version: '3.5'
      # Python35Mac:
      #   imageName: 'macos-10.13'
      #   python.version: '3.5'
      # Python36Linux:
      #   imageName: 'ubuntu-16.04'
      #   python.version: '3.6'
      # Python36Mac:
      #   imageName: 'macos-10.13'
      #   python.version: '3.6'
      # Python37Linux:
      #   imageName: 'ubuntu-16.04'
      #   python.version: '3.7'
      # Python37Mac:
      #   imageName: 'macos-10.13'
      #   python.version: '3.7'
      # Python38Linux:
      #   imageName: 'ubuntu-16.04'
      #   python.version: '3.8'
      Python38Windows:
        imageName: 'vs2017-win2016'
        python.version: '3.8'
      # Python38Mac:
      #   imageName: 'macos-10.13'
      #   python.version: '3.8'
    maxParallel: 4
  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      source ./travis/before_install_linux.sh
      before_install
    condition: eq( variables['Agent.OS'], 'Linux')
    displayName: 'Preinstall (Linux)'

  - script: choco install llvm
    condition: eq( variables['Agent.OS'], 'Windows_NT')
    displayName: 'Preinstall (Windows)'

  - script: |
      python -m pip install --upgrade pip wheel
      pip install -r requirements.txt
    displayName: 'Install dependencies'

  - script: |
      clang --version
      python setup.py bdist_wheel
    displayName: 'Build wheel'

  - bash: |
      rm -rf blis*
      python -m pip install dist/*.whl
    displayName: 'Install wheel'

  - script: |
      python -m pytest --pyargs blis
    displayName: 'Run tests'
